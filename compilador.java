/* Generated By:JavaCC: Do not edit this line. compilador.java */
        import java.util.Enumeration;
        import java.util.Hashtable;
        import java.util.Stack;
        import java.util.EmptyStackException;

        public class compilador implements compiladorConstants {

                static Hashtable contenedor = new Hashtable();
                static Stack cadena = new Stack();
                static Stack var = new Stack();

                public static void main(String args[]) throws ParseException {
                        compilador analizador = new compilador(System.in);
                        analizador.Inicio();
                        Enumeration enumeration = contenedor.elements();
                        while (enumeration.hasMoreElements()) {
                                Stack resultados = new Stack();
                                String resultadosSt [] = new String [6];
                                resultados = (Stack) enumeration.nextElement();
                                for(int i = 0; i < resultados.size()+1; i++){
                                        resultadosSt = (String[]) resultados.pop();
                                System.out.print("hashtable valores: " + resultadosSt[0]+"  \u005ct"+resultadosSt[1]+"\u005ct\u005ct\u005ct"+resultadosSt[2]);
                                System.out.println("\u005ct"+resultadosSt[3]+"\u005ct"+resultadosSt[4]+"\u005ct"+resultadosSt[5]);
                                }
                        }
                }

                public static void GenerarHash(String Id[]){
                        //System.out.print("Tipo = "+Id[0]+" Id = "+Id[1]);
                        //System.out.print(" Estructura = "+Id[2]+"Valor = "+Id[3]);
                        //System.out.println(" Tamano = "+Id[4]+"Posicion = "+Id[5]);

                        //se guardara en un arreglo con la siguiente estructura
                        // 0       1        2         3       4       5
                        //Tipo    ID    Estructura  Valor  tamano  posicion
                        // int    ab     arreglo      4      3      Local

            int nL = Id[1].length();
            Stack pilatemp = new Stack();
            Stack pilacontrol = new Stack();
            int clave = 0;
            for(int i = 0; i < nL ; i++){
                char character = Id[1].charAt(i); // start on the first character
                int ascii = (int) character; //convert the first character
                clave = clave+ascii;
            }
            //System.out.println("clave = "+clave);
            pilatemp = (Stack) contenedor.get(clave);
            boolean pilavacia = pilatemp == null;

            if(!pilavacia){
                pilacontrol = (Stack) contenedor.get(clave);
                //System.out.println("---------> 1");
                //System.out.println("pilacontrol = "+pilacontrol.size()+" pilatemp = "+pilatemp.size());
                                int i = 0;
                for (i = 0; i < pilacontrol.size(); i++) {
                    String dato[] = (String []) pilacontrol.elementAt(i);
                                        System.out.println("\u005ct\u005ct----------------->  "+dato[1]+" == "+Id[1]+"  <-----------------");
                    if(dato[1].equals(Id[1])){
                                                i = pilacontrol.size()+1;
                        System.out.println("\u005ct\u005ct**Error variable \u005c""+Id[1]+"\u005c" ya declarada**");
                    }
                }
                                if(i != (pilacontrol.size()+2)){
                                        pilacontrol.push(Id);
                    contenedor.put(clave, pilacontrol);
                                }

            }else{
                //System.out.println("---------> 2");
                pilacontrol.push(Id);
                contenedor.put(clave, pilacontrol);
            }

        }

                public static void DescargarPila(){
                        System.out.println("");
                        System.out.println("<------->");

                        String  acumuladorDatos = "";
                        boolean error = false;
                        Stack   expresion = new Stack();
                        String  valorGuardado[] = new String[6];
                        String  valorTemp[] = new String[6];
                        String  VarId;
                        //Acomodamos la pila para recorrerla
                        try {

                                for (int i = 0; i < var.size(); i++) {
                                        acumuladorDatos = ( String ) var.elementAt(i);
                                        //System.out.print(" "+acumuladorDatos);
                                        expresion.push(acumuladorDatos);
                                }

                        } catch (EmptyStackException e) {System.out.println(";");}

                        //System.out.println("");    
                        for (int i = 0; i < expresion.size(); i++) {
                                System.out.print(" "+expresion.elementAt(i));
                        }
                        System.out.println(";");
                        //Obtenemos la variable de la expresion
                        //la buscamos en la tabla y si se encuentra
                        //la sacamos de la tabla
                        VarId = ( String ) expresion.elementAt(0);
                        valorGuardado = BuscarId(VarId);

                        //System.out.print(valorGuardado[0]+" - "+valorGuardado[1]+" - "+valorGuardado[2]+" - ");
                        //System.out.println(valorGuardado[3]+" - "+valorGuardado[4]+" - "+valorGuardado[5]);
                        //si se encontro el dato se hase lo siguiente
                        if( valorGuardado[0] != null ){

                                //buscamos si es arreglo, si lo es buscamos
                                //si su variable dentro de los corchetes
                                //es valida si no mandamos un error
                                if(valorGuardado[2].equals("Arreglo")){

                                        String numArray = "";
                                        try {

                                                numArray = ( String ) expresion.elementAt(1);
                                                if(!numArray.equals("=")){
                                                        numArray = ( String ) expresion.elementAt(2);
                                                        int convertir = Integer.parseInt(numArray);
                                                }else{
                                                        System.out.println("**Error la variable "+expresion.elementAt(0)+" no es compatible**");
                                                }

                                        } catch (NumberFormatException e) {

                                                error = true;
                                                //buscamos la variable en la hash table
                                                valorTemp = BuscarId(numArray);
                                                //si se encientra la variable
                                                if(valorTemp[0] != null){

                                                        //si el tipo es diferente de manda un error
                                                        if(!valorTemp[0].equals(valorGuardado[0])){
                                                                System.out.println("**Error variable "+valorTemp[1]+" no compatible**");
                                                        }else{
                                                                //System.out.println("^^^  "+expresion.elementAt(5)+"  ^^^");
                                                                BuscarError(valorGuardado[0], expresion, 5);
                                                        }

                                                }
                                                else{ System.out.println("**Error la variable"+valorTemp[1]+" no esta previamente declarada**"); }

                                        }

                                }else{
                                        System.out.println(" No es Nulo Var");
                                        //System.out.println("^^^  "+expresion.elementAt(2)+"  ^^^");
                                        BuscarError(valorGuardado[0], expresion, 2);

                                }
                        }else{
                System.out.println("**Error variable no declarada**");
            }

                        while(!expresion.isEmpty()){ expresion.pop();}
                while(!var.isEmpty()){ var.pop();}

                }

                public static String[] BuscarId(String Id){

                        int     clave = 0;
                        int     nL = Id.length();
            Stack   pilatemp = new Stack();
            Stack   pilacontrol = new Stack();
                        boolean pilavacia;
                        String  retorno[] = new String [6];
            for(int i = 0; i < nL ; i++){

                char character = Id.charAt(i); // start on the first character
                int ascii = (int) character; //convert the first character
                clave = clave+ascii;

            }
            pilatemp = (Stack) contenedor.get(clave);
            pilavacia = pilatemp == null;
            if(!pilavacia){

                pilacontrol = (Stack) contenedor.get(clave);
                for (int i = 0; i < pilacontrol.size(); i++) {

                    String dato[] = (String []) pilacontrol.elementAt(i);
                    if(dato[1].equals(Id)){

                                                //System.out.println(" Encontrado ");
                        retorno[0] = dato[0];
                                                retorno[1] = dato[1];
                                                retorno[2] = dato[2];
                                                retorno[3] = dato[3];
                                                retorno[4] = dato[4];
                                                retorno[5] = dato[5];
                        i = pilacontrol.size();
                                                return retorno;

                    }

                }


            }
                        else{ System.out.println(" No hay tortillas "); }
                        return retorno;
                }

                //Busca en toda la cadena asignada si alguna variable o numero no es del 
                //tipo especifico, manda error si no lo es
                public static void BuscarError(String TipoEspecifico, Stack expresion, int posicion){

                        //hasta que la posicion no se igual no dejara de buscar
                        //varibles o numeros del mismo tipo, si llega ha hacer del
                        //tipo diferente se detiene y tambien manda el error.
                        while(posicion < expresion.size()){

                                String arregloTemp [] = new String[6];
                                String base =  ( String ) expresion.elementAt(posicion);
                                //System.out.println("  base = "+base);
                                //provocamos un error si hay una varible,
                                //si no lo es prosigue con su evaluacion.
                                try {
                                        int convertir = Integer.parseInt(base);
                                        if(TipoEspecifico.equals("int")){
                                                int i = 0;
                                                for (i = 0; i < base.length(); i++) {
                                                        char character = base.charAt(i);
                                                        if(character == '.'){
                                                                System.out.println("**Error Valores Flotantes no Acceptados**");
                                                                i = base.length()+1;
                                                                posicion = expresion.size();
                                                        }
                                                }
                                                if(i != base.length()+2){ posicion += 2; }
                                        }else{
                                                posicion += 2;
                                        }
                                } catch (NumberFormatException e) {

                                        arregloTemp = BuscarId(base);
                                        //System.out.println("  "+arregloTemp[0]+" == "+TipoEspecifico);
                                        if(arregloTemp[0] != null){
                                                //System.out.println("  "+arregloTemp[0]+" == "+TipoEspecifico);
                                                if(arregloTemp[0].equals(TipoEspecifico)){

                                                        //System.out.println("  comparacion == 0");
                                                        int comparacion = tipo(arregloTemp[2], expresion, posicion);
                                                        //System.out.println("  "+comparacion+" == 0");

                                                        if(comparacion == 0){
                                                                posicion = expresion.size();
                                                        }else{
                                                                //System.out.println("  posicion = "+posicion);
                                                                posicion += comparacion;
                                                                //System.out.println("  posicion = "+posicion+" comparacion = "+comparacion);
                                                        }

                                                }else{
                                                        System.out.println("**Error variable "+arregloTemp[1]+" no compatible**");
                                                        posicion = expresion.size()+1;
                                                }
                                        }else{
                                                System.out.println("**Error variable \u005c""+base+"\u005c" no se encuentra declarada**");
                                                posicion = expresion.size()+1;
                                        }
                                }

                        }

                }

                //buscamos si cumple con la estructura de cada parte, 
                //si la varible o la funcion o arreglo no cumple con el tipo 
                //especifico de la variable principal se imprime el error y se 
                //deja de buscar tanto en esta funcion como en la de BuscarError
                //si hay errores en la estructura se regresara un 0
                public static int tipo(String Estructura, Stack expresion, int posicion){

                        String arregloTemp[] = new String[6];
                        String variableTemp;
                        //System.out.println("  \tEstructura = "+Estructura+" posicion = "+posicion);
                        switch (Estructura) {
                                        case "Arreglo":

                                                //System.out.println("\t tamano"+expresion.size()+" -------Datos");
                                                if((posicion+1) < expresion.size()){
                                                        variableTemp =  ( String ) expresion.elementAt(posicion+1);
                                                        //System.out.println("\t"+expresion.elementAt(posicion+1)+" -------Datos");
                                                        if(variableTemp.equals("[")){
                                                                variableTemp =  ( String ) expresion.elementAt(posicion+2);
                                                                //System.out.println("  variableTemp = "+variableTemp);
                                                                try {
                                                                        int convertir = Integer.parseInt(variableTemp);
                                                                }catch (NumberFormatException e) {

                                                                        arregloTemp = BuscarId(variableTemp);
                                                                        if(arregloTemp[0] == null || arregloTemp[0].equals("")){
                                                                                //System.out.println("**Error variable "+arregloTemp[1]+" no compatible**");
                                                                        }else{

                                                                                if(!Estructura.equals(arregloTemp[0])){
                                                                                        //System.out.println("**Error variable "+arregloTemp[1]+" no compatible**");
                                                                                        return 0;
                                                                                }

                                                                        }

                                                                }
                                                        }else{
                                                                System.out.println("**Error variable "+expresion.elementAt(posicion)+" no compatible**");
                                                                return 0;
                                                        }
                                                }else{
                                                                System.out.println("**Error variable "+expresion.elementAt(posicion)+" no compatible**");
                                                                return 0;
                                                        }
                                                return 4;

                                        case "Varible":
                                                //System.out.println("  variable");
                                                return 2;
                                        case "Funcion":
                                                //System.out.println("  funcion");
                                                int datos = 0;
                                                for(int i = posicion; i<expresion.size(); i++){

                                                        datos++;
                                                        variableTemp =  ( String ) expresion.elementAt(i);
                                                        if(variableTemp.equals(")")){
                                                                i = expresion.size();
                                                                datos += 3;
                                                                return datos;
                                                        }

                                                }
                                                return 3;
                                        default:
                                                throw new AssertionError();
                                }

                }

                public static void DescargarPilaCadena(){
                        //System.out.println("");
                        //System.out.println("<------->");

                        String acumuladorDatos[] = new String [6];
                        acumuladorDatos[5] = (String) cadena.pop();
                        acumuladorDatos[4] = (String) cadena.pop();
                        acumuladorDatos[2] = (String) cadena.pop();
                        acumuladorDatos[1] = (String) cadena.pop();
                        acumuladorDatos[0] = (String) cadena.pop();

                        while(!var.isEmpty()){
                                var.pop();
                        }
                        GenerarHash(acumuladorDatos);
                        System.out.print("Tipo = "+acumuladorDatos[0]+"\u005ctId = "+acumuladorDatos[1]);
                        System.out.print("\u005ctEstructura = "+acumuladorDatos[2]+"\u005ctValor = "+acumuladorDatos[3]);
                        System.out.println("\u005ctTamano = "+acumuladorDatos[4]+"\u005ctPosicion = "+acumuladorDatos[5]);
                }

  static final public void Inicio() throws ParseException {
    label_1:
    while (true) {
      program();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Res_real:
      case Res_int:
      case Res_void:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);

  }

//---1
  static final public void program() throws ParseException {
    declaration_list();
  }

//---2---------------------recursividad a la izquierda
  static final public void declaration_list() throws ParseException {
    declaration();
    declaration_list_P();
  }

  static final public void declaration_list_P() throws ParseException {
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_2;
      }
      declaration();
      declaration_list_P();
    }
  }

//---3
  static final public void declaration() throws ParseException {
    if (jj_2_2(3)) {
      var_declaration();
                                            cadena.push("Global"); DescargarPilaCadena();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Res_real:
      case Res_int:
      case Res_void:
        fun_declaration();
                                    cadena.push("Clase"); DescargarPilaCadena();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//---4
  static final public void var_declaration() throws ParseException {
    type_specifier();
                          cadena.push(token.image);
    jj_consume_token(Id);
               cadena.push(token.image);
    var_declaration_P();
  }

  static final public void var_declaration_P() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Op_Punto_Coma:
      jj_consume_token(Op_Punto_Coma);
                          cadena.push("Varible"); cadena.push("1");
      break;
    case Op_Corchete_Izq:
      jj_consume_token(Op_Corchete_Izq);
      jj_consume_token(Num_Entero);
                                        cadena.push("Arreglo"); cadena.push(token.image);
      jj_consume_token(Op_Corchete_Der);
      jj_consume_token(Op_Punto_Coma);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//---5
  static final public void type_specifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Res_int:
      jj_consume_token(Res_int);
      break;
    case Res_void:
      jj_consume_token(Res_void);
      break;
    case Res_real:
      jj_consume_token(Res_real);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//---6
  static final public void fun_declaration() throws ParseException {
    type_specifier();
                            cadena.push(token.image);
    jj_consume_token(Id);
               cadena.push(token.image);  cadena.push("Funcion"); cadena.push("1");
    jj_consume_token(Op_Parentesis_Izq);
    params();
    jj_consume_token(Op_Parentesis_Der);
    compound_stmt();
  }

//---7
  static final public void params() throws ParseException {
    if (jj_2_3(2)) {
      param_list();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Res_void:
        jj_consume_token(Res_void);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//---8---------------------recursividad a la izquierda
  static final public void param_list() throws ParseException {
    param();
    param_list_P();
  }

  static final public void param_list_P() throws ParseException {
    label_3:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(Op_Coma);
      param();
      param_list_P();
    }
  }

//---9
  static final public void param() throws ParseException {
    type_specifier();
                           cadena.push(token.image);
    jj_consume_token(Id);
               cadena.push(token.image);
    param_P();
                     //System.out.println("token == "+token.image);
                if(token.image == "]"){ cadena.push("Arreglo"); cadena.push("-");  }
                else{ cadena.push("Varible"); cadena.push("1"); }
                cadena.push("Local"); DescargarPilaCadena();
  }

  static final public void param_P() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Op_Corchete_Izq:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      jj_consume_token(Op_Corchete_Izq);
      jj_consume_token(Op_Corchete_Der);
    }
  }

//---10
  static final public void compound_stmt() throws ParseException {
    jj_consume_token(Op_Llave_Izq);
    local_declarations();
    statement_list();
    jj_consume_token(Op_Llave_Der);
  }

//---11---------------------recursividad a la izquierda
  static final public void local_declarations() throws ParseException {
    local_declaration_P();
  }

  static final public void local_declaration_P() throws ParseException {
    label_5:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_5;
      }
      var_declaration();
                                           cadena.push("Local"); DescargarPilaCadena();
      local_declaration_P();
    }
  }

//---12
  static final public void statement_list() throws ParseException {
    statement_list_P();
  }

  static final public void statement_list_P() throws ParseException {
    label_6:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_6;
      }
      statement();
      statement_list_P();
    }
  }

//---13
  static final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Op_Punto_Coma:
    case Op_Parentesis_Izq:
    case Num_Entero:
    case Num_Decimal:
    case Id:
      expression_stmt();
      break;
    case Op_Llave_Izq:
      compound_stmt();
      break;
    case Res_if:
      selection_stmt();
      break;
    case Res_while:
      iteration_stmt();
      break;
    case Res_return:
      return_stmt();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//---14
  static final public void expression_stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Op_Parentesis_Izq:
    case Num_Entero:
    case Num_Decimal:
    case Id:
      expression();
      jj_consume_token(Op_Punto_Coma);
                                      if(!var.isEmpty()){DescargarPila(); System.out.println("<--------->\u005cn");}
      break;
    case Op_Punto_Coma:
      jj_consume_token(Op_Punto_Coma);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//---15
  static final public void selection_stmt() throws ParseException {
    jj_consume_token(Res_if);
    jj_consume_token(Op_Parentesis_Izq);
    expression();
                       DescargarPila(); System.out.println("<--------->"); System.out.println("");
    jj_consume_token(Op_Parentesis_Der);
    statement();
    selection_stmt_P();
  }

  static final public void selection_stmt_P() throws ParseException {
    label_7:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(Res_else);
      statement();
    }
  }

//---16
  static final public void iteration_stmt() throws ParseException {
    jj_consume_token(Res_while);
    jj_consume_token(Op_Parentesis_Izq);
    expression();
                       DescargarPila(); System.out.println("<--------->"); System.out.println("");
    jj_consume_token(Op_Parentesis_Der);
    statement();
  }

//---17
  static final public void return_stmt() throws ParseException {
    jj_consume_token(Res_return);
    return_stmt_P();
  }

  static final public void return_stmt_P() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Op_Punto_Coma:
      jj_consume_token(Op_Punto_Coma);
      break;
    case Op_Parentesis_Izq:
    case Num_Entero:
    case Num_Decimal:
    case Id:
      expression();
      jj_consume_token(Op_Punto_Coma);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//---18->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  static final public void expression() throws ParseException {
    if (jj_2_8(8)) {
      var();

      jj_consume_token(Op_Asignacion);
                          var.push(token.image);
      expression();
                           DescargarPila(); System.out.println("<--------->\u005cn");
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Op_Parentesis_Izq:
      case Num_Entero:
      case Num_Decimal:
      case Id:
        simple_expression();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//---19--------------------------------------------------------------------------------------------------------
  static final public void var() throws ParseException {
    jj_consume_token(Id);
              var.push(token.image);
    var_P();
  }

  static final public void var_P() throws ParseException {
    label_8:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(Op_Corchete_Izq);
                                          var.push(token.image);
      expression();

      jj_consume_token(Op_Corchete_Der);
                           var.push(token.image);
    }
  }

//------------------------------------------------------------------------------------------------------------

//---20
  static final public void simple_expression() throws ParseException {
    additive_expression();
    simple_expression_P();
  }

  static final public void simple_expression_P() throws ParseException {
    label_9:
    while (true) {
      if (jj_2_10(2)) {
        ;
      } else {
        break label_9;
      }
      relop();
                                var.push(token.image);
      additive_expression();
    }
  }

//---21				
  static final public void relop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Op_Menor_Igual:
      jj_consume_token(Op_Menor_Igual);
      break;
    case Op_Menor:
      jj_consume_token(Op_Menor);
      break;
    case Op_Mayor:
      jj_consume_token(Op_Mayor);
      break;
    case Op_Mayor_Igual:
      jj_consume_token(Op_Mayor_Igual);
      break;
    case Op_Doble_Igual:
      jj_consume_token(Op_Doble_Igual);
      break;
    case Op_Diferente:
      jj_consume_token(Op_Diferente);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//---22---------------------recursividad a la izquierda
  static final public void additive_expression() throws ParseException {
    term();
    additive_expression_P();
  }

  static final public void additive_expression_P() throws ParseException {
    label_10:
    while (true) {
      if (jj_2_11(2)) {
        ;
      } else {
        break label_10;
      }
      addop();
                                var.push(token.image);
      term();
      additive_expression_P();
    }
  }

//---23
  static final public void addop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Op_Suma:
      jj_consume_token(Op_Suma);
      break;
    case Op_Resta:
      jj_consume_token(Op_Resta);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//---24---------------------recursividad a la izquierda>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  static final public void term() throws ParseException {
    factor();

    term_P();

  }

  static final public void term_P() throws ParseException {
    label_11:
    while (true) {
      if (jj_2_12(2)) {
        ;
      } else {
        break label_11;
      }
      mulop();
                                var.push(token.image);
      factor();

      term_P();
    }
  }

//---------------------------------------------------------------------------------------------------------------------------------

//---25
  static final public void mulop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Op_Mult:
      jj_consume_token(Op_Mult);
      break;
    case Op_Div:
      jj_consume_token(Op_Div);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//---26
  static final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Op_Parentesis_Izq:
      jj_consume_token(Op_Parentesis_Izq);
      expression();
      jj_consume_token(Op_Parentesis_Der);
      break;
    case Num_Entero:
      jj_consume_token(Num_Entero);
                          var.push(token.image);
      break;
    case Num_Decimal:
      jj_consume_token(Num_Decimal);
                          var.push(token.image);
      break;
    default:
      jj_la1[13] = jj_gen;
      if (jj_2_13(2)) {
        call();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Id:
          var();
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

//---27
  static final public void call() throws ParseException {
    jj_consume_token(Id);
               var.push(token.image);
    jj_consume_token(Op_Parentesis_Izq);
                             var.push(token.image);
    args();
    jj_consume_token(Op_Parentesis_Der);
                             var.push(token.image);
  }

//---28
  static final public void args() throws ParseException {
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Op_Parentesis_Izq:
      case Num_Entero:
      case Num_Decimal:
      case Id:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_12;
      }
      arg_list();
    }
  }

//---29---------------------recursividad a la izquierda
  static final public void arg_list() throws ParseException {
    expression();
    arg_list_P();
  }

  static final public void arg_list_P() throws ParseException {
    label_13:
    while (true) {
      if (jj_2_14(2)) {
        ;
      } else {
        break label_13;
      }
      jj_consume_token(Op_Coma);
                                                                  var.push(token.image);
      expression();
      arg_list_P();
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_3R_19() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(Res_while)) return true;
    if (jj_scan_token(Op_Parentesis_Izq)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(Res_if)) return true;
    if (jj_scan_token(Op_Parentesis_Izq)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(Op_Llave_Izq)) return true;
    if (jj_3R_53()) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(Op_Llave_Der)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(Op_Punto_Coma)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(Op_Coma)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_21()) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_30()) return true;
    if (jj_scan_token(Id)) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_62()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(Op_Coma)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_30()) return true;
    if (jj_scan_token(Id)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(Id)) return true;
    if (jj_scan_token(Op_Parentesis_Izq)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(Op_Parentesis_Der)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(Op_Corchete_Izq)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(Op_Punto_Coma)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(Num_Decimal)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(Num_Entero)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_30()) return true;
    if (jj_scan_token(Id)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(Op_Parentesis_Izq)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(Op_Parentesis_Der)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    }
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_26()) return true;
    if (jj_3R_27()) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_27()) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_23()) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_24()) return true;
    if (jj_3R_25()) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_25()) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_22()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(Res_return)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(Op_Corchete_Izq)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(Op_Corchete_Der)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(Res_else)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(Id)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(Op_Asignacion)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_18()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public compiladorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x21800,0x21800,0x40000000,0x21800,0x20000,0x0,0x40058000,0x40000000,0x40000000,0x0,0x2f800000,0x180000,0x600000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x4,0x0,0x0,0x4,0x551,0x541,0x541,0x541,0x0,0x0,0x0,0x141,0x400,0x541,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[14];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public compilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public compilador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new compiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public compilador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new compiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public compilador(compiladorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(compiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 14; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        }
