options{
        IGNORE_CASE=true ;
        //DEBUG_PARSER=true;
        //DEBUG_LOOKAHEAD=true;
        //DEBUG_TOKEN_MANAGER=true;
    }

PARSER_BEGIN(compilador)

	import java.util.Enumeration;
	import java.util.Hashtable;
	import java.util.Stack;
	import java.util.EmptyStackException;

	public class compilador {

		static Hashtable contenedor = new Hashtable();
		static Stack cadena = new Stack();
		static Stack var = new Stack();

		public static void main(String args[]) throws ParseException {
			compilador analizador = new compilador(System.in);
			analizador.Inicio();
			Enumeration enumeration = contenedor.elements();
			while (enumeration.hasMoreElements()) {
				Stack resultados = new Stack();
				String resultadosSt [] = new String [6];
				resultados = (Stack) enumeration.nextElement();
				for(int i = 0; i < resultados.size()+1; i++){
					resultadosSt = (String[]) resultados.pop();
				System.out.print("hashtable valores: " + resultadosSt[0]+"  \t"+resultadosSt[1]+"\t\t\t"+resultadosSt[2]);
				System.out.println("\t"+resultadosSt[3]+"\t"+resultadosSt[4]+"\t"+resultadosSt[5]);
				}
			}
		}

		public static void GenerarHash(String Id[]){
			//System.out.print("Tipo = "+Id[0]+" Id = "+Id[1]);
			//System.out.print(" Estructura = "+Id[2]+"Valor = "+Id[3]);
			//System.out.println(" Tamano = "+Id[4]+"Posicion = "+Id[5]);

			//se guardara en un arreglo con la siguiente estructura
			// 0       1        2         3       4       5
			//Tipo    ID    Estructura  Valor  tamano  posicion
			// int    ab     arreglo      4      3      Local

            int nL = Id[1].length();
            Stack pilatemp = new Stack();
            Stack pilacontrol = new Stack();
            int clave = 0;
            for(int i = 0; i < nL ; i++){   
                char character = Id[1].charAt(i); // start on the first character
                int ascii = (int) character; //convert the first character
                clave = clave+ascii; 
            }
            //System.out.println("clave = "+clave);
            pilatemp = (Stack) contenedor.get(clave);
            boolean pilavacia = pilatemp == null;
            
            if(!pilavacia){
                pilacontrol = (Stack) contenedor.get(clave);
                //System.out.println("---------> 1");
                //System.out.println("pilacontrol = "+pilacontrol.size()+" pilatemp = "+pilatemp.size());
				int i = 0;
                for (i = 0; i < pilacontrol.size(); i++) {
                    String dato[] = (String []) pilacontrol.elementAt(i);
					System.out.println("\t\t----------------->  "+dato[1]+" == "+Id[1]+"  <-----------------");
                    if(dato[1].equals(Id[1])){
						i = pilacontrol.size()+1;
                        System.out.println("\t\t**Error variable \""+Id[1]+"\" ya declarada**");
                    }
                }
				if(i != (pilacontrol.size()+2)){
					pilacontrol.push(Id);
                    contenedor.put(clave, pilacontrol);
				}

            }else{
                //System.out.println("---------> 2");
                pilacontrol.push(Id);
                contenedor.put(clave, pilacontrol);
            }

        }

		public static void DescargarPila(){
			System.out.println("");
			System.out.println("<------->");
			
			String  acumuladorDatos = "";
			boolean error = false;
			Stack   expresion = new Stack();
			String  valorGuardado[] = new String[6]; 
			String  valorTemp[] = new String[6];
			String  VarId;
			//Acomodamos la pila para recorrerla
			try {
       
				for (int i = 0; i < var.size(); i++) {
					acumuladorDatos = ( String ) var.elementAt(i);
					//System.out.print(" "+acumuladorDatos);
					expresion.push(acumuladorDatos);
				}
				
			} catch (EmptyStackException e) {System.out.println(";");}

			//System.out.println("");    
			for (int i = 0; i < expresion.size(); i++) {
				System.out.print(" "+expresion.elementAt(i));
			}
			System.out.println(";");
			//Obtenemos la variable de la expresion
			//la buscamos en la tabla y si se encuentra
			//la sacamos de la tabla
			VarId = ( String ) expresion.elementAt(0);
			valorGuardado = BuscarId(VarId);

			//System.out.print(valorGuardado[0]+" - "+valorGuardado[1]+" - "+valorGuardado[2]+" - ");
			//System.out.println(valorGuardado[3]+" - "+valorGuardado[4]+" - "+valorGuardado[5]);
			//si se encontro el dato se hase lo siguiente
			if( valorGuardado[0] != null ){
				
				//buscamos si es arreglo, si lo es buscamos
				//si su variable dentro de los corchetes
				//es valida si no mandamos un error
				if(valorGuardado[2].equals("Arreglo")){

					String numArray = "";
					try {

						numArray = ( String ) expresion.elementAt(1);
						if(!numArray.equals("=")){
							numArray = ( String ) expresion.elementAt(2);
							int convertir = Integer.parseInt(numArray);
						}else{
							System.out.println("**Error la variable "+expresion.elementAt(0)+" no es compatible**");
						}

					} catch (NumberFormatException e) {

						error = true;
						//buscamos la variable en la hash table
						valorTemp = BuscarId(numArray);
						//si se encientra la variable
						if(valorTemp[0] != null){  

							//si el tipo es diferente de manda un error
							if(!valorTemp[0].equals(valorGuardado[0])){
								System.out.println("**Error variable "+valorTemp[1]+" no compatible**");
							}else{
								//System.out.println("^^^  "+expresion.elementAt(5)+"  ^^^");
								BuscarError(valorGuardado[0], expresion, 5);
							}

						}
						else{ System.out.println("**Error la variable"+valorTemp[1]+" no esta previamente declarada**"); }
						
					}

				}else{
					System.out.println(" No es Nulo Var");
					//System.out.println("^^^  "+expresion.elementAt(2)+"  ^^^");
					BuscarError(valorGuardado[0], expresion, 2); 
					
				}
			}else{
                System.out.println("**Error variable no declarada**");
            }

			while(!expresion.isEmpty()){ expresion.pop();}
        	while(!var.isEmpty()){ var.pop();}

		}

		public static String[] BuscarId(String Id){

			int     clave = 0;
			int     nL = Id.length();
            Stack   pilatemp = new Stack();
            Stack   pilacontrol = new Stack();
			boolean pilavacia;
			String  retorno[] = new String [6];
            for(int i = 0; i < nL ; i++){   

                char character = Id.charAt(i); // start on the first character
                int ascii = (int) character; //convert the first character
                clave = clave+ascii; 

            }
            pilatemp = (Stack) contenedor.get(clave);
            pilavacia = pilatemp == null;
            if(!pilavacia){

                pilacontrol = (Stack) contenedor.get(clave);
                for (int i = 0; i < pilacontrol.size(); i++) {

                    String dato[] = (String []) pilacontrol.elementAt(i);
                    if(dato[1].equals(Id)){

						//System.out.println(" Encontrado ");
                        retorno[0] = dato[0];  
						retorno[1] = dato[1];  
						retorno[2] = dato[2];  
						retorno[3] = dato[3];  
						retorno[4] = dato[4];  
						retorno[5] = dato[5];  
                        i = pilacontrol.size();
						return retorno;

                    }

                }


            }
			else{ System.out.println(" No hay tortillas "); }
			return retorno;
		}
		
		//Busca en toda la cadena asignada si alguna variable o numero no es del 
		//tipo especifico, manda error si no lo es
		public static void BuscarError(String TipoEspecifico, Stack expresion, int posicion){
			
			//hasta que la posicion no se igual no dejara de buscar
			//varibles o numeros del mismo tipo, si llega ha hacer del
			//tipo diferente se detiene y tambien manda el error.
			while(posicion < expresion.size()){

				String arregloTemp [] = new String[6];
				String base =  ( String ) expresion.elementAt(posicion);
				//System.out.println("  base = "+base);
				//provocamos un error si hay una varible,
				//si no lo es prosigue con su evaluacion.
				try {
					int convertir = Integer.parseInt(base);
					if(TipoEspecifico.equals("int")){
						int i = 0;
						for (i = 0; i < base.length(); i++) {
							char character = base.charAt(i);
							if(character == '.'){
								System.out.println("**Error Valores Flotantes no Acceptados**");
								i = base.length()+1;
								posicion = expresion.size();
							}
						}
						if(i != base.length()+2){ posicion += 2; }
					}else{
						posicion += 2;
					}
				} catch (NumberFormatException e) {
					
					arregloTemp = BuscarId(base);
					//System.out.println("  "+arregloTemp[0]+" == "+TipoEspecifico);
					if(arregloTemp[0] != null){
						//System.out.println("  "+arregloTemp[0]+" == "+TipoEspecifico);
						if(arregloTemp[0].equals(TipoEspecifico)){
							
							//System.out.println("  comparacion == 0");
							int comparacion = tipo(arregloTemp[2], expresion, posicion);
							//System.out.println("  "+comparacion+" == 0");

							if(comparacion == 0){
								posicion = expresion.size();
							}else{
								//System.out.println("  posicion = "+posicion);
								posicion += comparacion;
								//System.out.println("  posicion = "+posicion+" comparacion = "+comparacion);
							}
							
						}else{
							System.out.println("**Error variable \""+arregloTemp[1]+"\" no compatible**");
							posicion = expresion.size()+1;
						}
					}else{
						System.out.println("**Error variable \""+base+"\" no se encuentra declarada**");
						posicion = expresion.size()+1;
					}
				}

			}	

		}

		//buscamos si cumple con la estructura de cada parte, 
		//si la varible o la funcion o arreglo no cumple con el tipo 
		//especifico de la variable principal se imprime el error y se 
		//deja de buscar tanto en esta funcion como en la de BuscarError
	   	//si hay errores en la estructura se regresara un 0
		public static int tipo(String Estructura, Stack expresion, int posicion){
			
			String arregloTemp[] = new String[6];
			String variableTemp;
			//System.out.println("  \tEstructura = "+Estructura+" posicion = "+posicion);
			switch (Estructura) {
					case "Arreglo":
						
						//System.out.println("\t tamano"+expresion.size()+" -------Datos");
						if((posicion+1) < expresion.size()){
							variableTemp =  ( String ) expresion.elementAt(posicion+1);
							//System.out.println("\t"+expresion.elementAt(posicion+1)+" -------Datos");
							if(variableTemp.equals("[")){
								variableTemp =  ( String ) expresion.elementAt(posicion+2);
								//System.out.println("  variableTemp = "+variableTemp);
								try {
									int convertir = Integer.parseInt(variableTemp);
								}catch (NumberFormatException e) {

									arregloTemp = BuscarId(variableTemp);
									if(arregloTemp[0] == null || arregloTemp[0].equals("")){
										//System.out.println("**Error variable "+arregloTemp[1]+" no compatible**");
									}else{

										if(!Estructura.equals(arregloTemp[0])){
											//System.out.println("**Error variable "+arregloTemp[1]+" no compatible**");
											return 0;
										}

									}

								}
							}else{ 
								System.out.println("**Error variable "+expresion.elementAt(posicion)+" no compatible**");
								return 0;
							}
						}else{ 
								System.out.println("**Error variable "+expresion.elementAt(posicion)+" no compatible**");
								return 0;
							}
						return 4;

					case "Varible":
						//System.out.println("  variable");
						return 2;
					case "Funcion":
						//System.out.println("  funcion");
						int datos = 0;
						for(int i = posicion; i<expresion.size(); i++){
							
							datos++;
							variableTemp =  ( String ) expresion.elementAt(i);
							if(variableTemp.equals(")")){
								i = expresion.size();
								datos += 3;
								return datos;
							}

						}
						return 3;
					default:
						throw new AssertionError();
				}

		}

		public static void DescargarPilaCadena(){
			//System.out.println("");
			//System.out.println("<------->");

			String acumuladorDatos[] = new String [6];
			acumuladorDatos[5] = (String) cadena.pop();
			acumuladorDatos[4] = (String) cadena.pop();
			acumuladorDatos[2] = (String) cadena.pop();
			acumuladorDatos[1] = (String) cadena.pop();
			acumuladorDatos[0] = (String) cadena.pop();

			while(!var.isEmpty()){
				var.pop();
			}
			GenerarHash(acumuladorDatos);
			System.out.print("Tipo = "+acumuladorDatos[0]+"\tId = "+acumuladorDatos[1]);
			System.out.print("\tEstructura = "+acumuladorDatos[2]+"\tValor = "+acumuladorDatos[3]);
			System.out.println("\tTamano = "+acumuladorDatos[4]+"\tPosicion = "+acumuladorDatos[5]);
		}

	}

PARSER_END(compilador)

SKIP : { " "| "\t"| "\n"| "\r"}
SKIP:{<"/*">:Comentario_Muchos}
 <Comentario_Muchos> SKIP:
 {"*/" {System.out.println("Encontre un comentario de muchas lineas");}:DEFAULT}
 <Comentario_Muchos>MORE:
 {<~[]> }
SKIP:{ <"//">:Comentario_Uno }
 <Comentario_Uno> 
SKIP:{ "\n" {System.out.println("Encontre un comentario de una linea");}:DEFAULT}
 <Comentario_Uno>
MORE:{ <~[]> }

TOKEN :{< Res_real: "real" >}
TOKEN :{< Res_int: "int" >}
TOKEN :{< Res_float: "float" > }
TOKEN :{< Res_else: "else" >}
TOKEN :{< Res_if: "if" >}
TOKEN :{< Res_return: "return" >}
TOKEN :{< Res_void: "void" >}
TOKEN :{< Res_while: "while" >}

TOKEN :{< Op_Suma: "+" >}
TOKEN :{< Op_Resta: "-" >}
TOKEN :{< Op_Mult: "*" >}
TOKEN :{< Op_Div: "/" >}

TOKEN :{< Op_Menor: "<" >}
TOKEN :{< Op_Mayor: ">" >}
TOKEN :{< Op_Menor_Igual: "<=" >}
TOKEN :{< Op_Mayor_Igual: ">=" >}
TOKEN :{< Op_Diferente: "!=" >}
TOKEN :{< Op_Asignacion: "=" >}
TOKEN :{< Op_Doble_Igual: "==" >}
TOKEN :{< Op_Punto_Coma: ";" >}
TOKEN :{< Op_Coma: "," >}

TOKEN :{< Op_Parentesis_Izq: "(" >}
TOKEN :{< Op_Parentesis_Der: ")" >}
TOKEN :{< Op_Corchete_Izq: "[" >}
TOKEN :{< Op_Corchete_Der: "]" >}
TOKEN :{< Op_Llave_Izq: "{" >}
TOKEN :{< Op_Llave_Der: "}" >}

TOKEN:{< Num_Entero: ["1"-"9"](["0"-"9"])*|"0"> }
TOKEN:{< Num_Entero_Invalido: "0"(["0"-"9"])+ > }
TOKEN:{< Num_Decimal: ["1"-"9"](["0"-"9"])*"."(["0"-"9"])+ | "0."(["0"-"9"])+ > }
TOKEN:{< Num_Decimal_Invalido: (["a"-"z","A"-"Z","0"-"9"])+"."(["a"-"z","A"-"Z","0"-"9"])+ | (["a"-"z","A"-"Z","0"-"9"])+"." | "."(["a"-"z","A"-"Z","0"-"9"])+ | ["1"-"9"](["0"-"9"])*"." | "."(["0"-"9"])+ >}

TOKEN:{< Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >}
TOKEN:{<Id_Invalido: (["0"-"9"])+( ["a"-"z","A"-"Z","0"-"9"] )+>}
TOKEN :{< Id_Desc_inv: "|"<Id> >}

SPECIAL_TOKEN:{< NoValido: ~[] >}

void Inicio() :{}
{
	( program() ) + <EOF>{}
}

//---1
void program() :{}		
{	
	declaration_list()					
}

//---2---------------------recursividad a la izquierda
void declaration_list() :{}	{	declaration() declaration_list_P()							}	
void declaration_list_P() :{}	{	( LOOKAHEAD(2) declaration() declaration_list_P() )*					}

//---3
void declaration() :{}		
{	   LOOKAHEAD(3)  var_declaration(){ cadena.push("Global"); DescargarPilaCadena(); } 
		|  
		fun_declaration() { cadena.push("Clase"); DescargarPilaCadena(); }									
}

//---4
void var_declaration() :{}	
{	
	type_specifier() {cadena.push(token.image);} 
	<Id> { cadena.push(token.image); } 
	var_declaration_P()						
}
void var_declaration_P() :{}	
{	  
	<Op_Punto_Coma> { cadena.push("Varible"); cadena.push("1"); }
	| 
	<Op_Corchete_Izq> <Num_Entero>{ cadena.push("Arreglo"); cadena.push(token.image); } <Op_Corchete_Der> <Op_Punto_Coma> 			
}

//---5
void type_specifier() :{}	
{	  
	<Res_int> 
	| 
	<Res_void>
	|
	<Res_real>										
}

//---6
void fun_declaration() :{}	
{	
	type_specifier() {  cadena.push(token.image); } 
	<Id> { cadena.push(token.image);  cadena.push("Funcion"); cadena.push("1");} 
	<Op_Parentesis_Izq> params() <Op_Parentesis_Der> compound_stmt()  
}

//---7
void params() :{}		
{ 	  
	LOOKAHEAD(2) param_list() 
	| 
	<Res_void>										
}

//---8---------------------recursividad a la izquierda
void param_list() :{} 		
{	
	param() param_list_P()									
} 
void param_list_P() :{} 	
{	
	( LOOKAHEAD(2) <Op_Coma> param() param_list_P() )*					
} 

//---9
void param() :{}		
{	
	type_specifier() { cadena.push(token.image);} 
	<Id> { cadena.push(token.image); } 
	 param_P() { //System.out.println("token == "+token.image);
		if(token.image == "]"){ cadena.push("Arreglo"); cadena.push("-");  }
		else{ cadena.push("Varible"); cadena.push("1"); }  
		cadena.push("Local"); DescargarPilaCadena();
		}								
} 
void param_P() :{} 		{	( <Op_Corchete_Izq> <Op_Corchete_Der> )*						} 

//---10
void compound_stmt() :{} 	{	<Op_Llave_Izq> local_declarations() statement_list() <Op_Llave_Der> 			} 

//---11---------------------recursividad a la izquierda
void local_declarations() :{} 	{	local_declaration_P()									   } 
void local_declaration_P() :{} 	
{	
	( LOOKAHEAD(2) var_declaration() { cadena.push("Local"); DescargarPilaCadena(); }
	local_declaration_P() )*  
	} 

//---12
void statement_list() :{} 	{	statement_list_P() 									    }  
void statement_list_P() :{} 	{	( LOOKAHEAD(2) statement() statement_list_P() )*	} 

//---13
void statement() :{} 		
{	  
	expression_stmt() 
	| compound_stmt() 
	| selection_stmt() 
	| iteration_stmt() 
	| return_stmt() 									
} 

//---14
void expression_stmt() :{}	
{	  
	expression() <Op_Punto_Coma>{ if(!var.isEmpty()){DescargarPila(); System.out.println("<--------->\n");} }
	| <Op_Punto_Coma> 									
} 

//---15
void selection_stmt() :{} 	
{	
	<Res_if> <Op_Parentesis_Izq> 
	expression() { DescargarPila(); System.out.println("<--------->"); System.out.println("");}
	<Op_Parentesis_Der> statement() selection_stmt_P() 
} 
void selection_stmt_P() :{} 	{	( LOOKAHEAD(2) <Res_else> statement() )*						} 

//---16
void iteration_stmt() :{} 	
{	
	<Res_while> <Op_Parentesis_Izq> 
	expression() { DescargarPila(); System.out.println("<--------->"); System.out.println("");}
	<Op_Parentesis_Der> statement()		
} 

//---17
void return_stmt() :{} 		{	<Res_return> return_stmt_P()								}
void return_stmt_P() :{} 	
{	 
	<Op_Punto_Coma>
	| expression() <Op_Punto_Coma> 							
}

//---18->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
void expression() :{ /*System.out.println("---> funcion expression <---");*/ } 		
{	  
	LOOKAHEAD(8) var(){  }
	<Op_Asignacion> { var.push(token.image); }
	expression()     { DescargarPila(); System.out.println("<--------->\n"); }		
	| simple_expression() 									
}

//---19--------------------------------------------------------------------------------------------------------
void var() :{ /*System.out.println("---> funcion variable <---");*/ } 			
{	
	<Id>{ var.push(token.image); } var_P()									
}
void var_P() :{} 		
{	
	( LOOKAHEAD(2) <Op_Corchete_Izq>{ var.push(token.image); } 
	expression() {  }
	<Op_Corchete_Der>{ var.push(token.image); } )*			
} 
//------------------------------------------------------------------------------------------------------------

//---20
void simple_expression() :{}	{	additive_expression() simple_expression_P()						}
void simple_expression_P() :{}	
{	
	( LOOKAHEAD(2) relop(){ var.push(token.image); } additive_expression() )*						
}

//---21				
void relop() :{} 		
{	  
	<Op_Menor_Igual> 
	| <Op_Menor> 
	| <Op_Mayor>  
	| <Op_Mayor_Igual> 
	| <Op_Doble_Igual> 
	| <Op_Diferente>									
}

//---22---------------------recursividad a la izquierda
void additive_expression() :{} 	
{	
	term() additive_expression_P() 								
}
void additive_expression_P() :{}
{	
	( LOOKAHEAD(2) addop(){ var.push(token.image); } term() additive_expression_P() )*				
}

//---23
void addop() :{}{	<Op_Suma> | <Op_Resta>									}

//---24---------------------recursividad a la izquierda>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
void term() :{ /*System.out.println("---> funcion term <---");*/ } 		
{	
	factor(){  } 
	term_P() {  }								
}
void term_P() :{ /*System.out.println("---> funcion term_P <---");*/ } 		
{	
	( LOOKAHEAD(2) mulop(){ var.push(token.image); } 
	factor(){  } 
	term_P() )*						
}
//---------------------------------------------------------------------------------------------------------------------------------

//---25
void mulop() :{} {	<Op_Mult> | <Op_Div> 									}

//---26
void factor() :{ /*System.out.println("---> funcion factor <---");*/ } 		
{	  
	<Op_Parentesis_Izq> expression() <Op_Parentesis_Der> 	 
	| <Num_Entero>  { var.push(token.image); }	    
	| <Num_Decimal>	{ var.push(token.image); }
	| LOOKAHEAD(2) call()
	| var()										
}

//---27
void call() :{} 		
{	
	<Id> { var.push(token.image); }
	<Op_Parentesis_Izq>{ var.push(token.image); } 
	args() 
	<Op_Parentesis_Der>{ var.push(token.image); }				
}

//---28
void args() :{} 		{	( arg_list() )*										}

//---29---------------------recursividad a la izquierda
void arg_list() :{} 		{	expression() arg_list_P()								}
void arg_list_P() :{} 		{	( LOOKAHEAD(2) <Op_Coma>{ var.push(token.image); } expression() arg_list_P() )*					}





















